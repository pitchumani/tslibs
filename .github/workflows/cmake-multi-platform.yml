# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake Multi-Platform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Set up build directories
        run: |
          mkdir build
          mkdir examples/build
          mkdir src/tests/build
        shell: bash
      - name: Configure and install main project
        run: |
          cmake -DCMAKE_INSTALL_PREFIX=../install ..
          cmake --build .
          cmake --install .
        working-directory: build
      - name: Configure examples
        run: cmake -DCUSTOM_INSTALL_PREFIX=../../install ..
        working-directory: examples/build
      - name: Build examples
        run: cmake --build .
        working-directory: examples/build
      - name: Run example tests (Linux/macOS)
        if: runner.os != 'Windows'
        run: ./bin/example1 && ./bin/example2
        working-directory: examples/build
      - name: Run example tests (Windows)
        if: runner.os == 'Windows'
        run: |
          .\bin\example1.exe
          .\bin\example2.exe
        working-directory: examples/build
      - name: Build and run unit tests (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cmake ..
          cmake --build .
          ./tsstack_test
        working-directory: src/tests/build
      - name: Build and run unit tests (Windows)
        if: runner.os == 'Windows'
        run: |
          cmake ..
          cmake --build .
          .\tsstack_test.exe
        working-directory: src/tests/build
